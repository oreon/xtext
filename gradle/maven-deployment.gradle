apply plugin: 'maven'
apply plugin: 'signing'

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar, javadocJar
}

signing {
  sign configurations.archives
  required {!version.endsWith('SNAPSHOT') && gradle.taskGraph.hasTask('uploadArchives')}
}

def installer = install.repositories.mavenInstaller()
def deployer = uploadArchives.repositories.mavenDeployer()

configure(deployer) {
	beforeDeployment { deployment -> signing.signPom(deployment) }
	repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
		if (project.hasProperty('sonatypeUserName') && project.hasProperty('sonatypePassword')) {
			authentication(userName: sonatypeUserName, password: sonatypePassword)
		}
	}
	snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
		if (project.hasProperty('sonatypeUserName') && project.hasProperty('sonatypePassword')) {
			authentication(userName: sonatypeUserName, password: sonatypePassword)
		}
	}

}

[installer, deployer]*.pom*.project {
	def parentPom = file("$rootDir/maven/org.eclipse.xtext.parent/pom.xml")
	def parent = new XmlSlurper().parse(parentPom)

	name = project.name
	url = parent.url
	description = parent.description

	scm {
		url = parent.scm.url
		connection = parent.scm.connection
	}

	licenses {
		parent.licenses.children().each {parentLicense ->
			license {
				name = parentLicense.name
				url = parentLicense.url
			}
		}
	}

	developers {
		parent.developers.children().each {parentDeveloper ->
			developer {
				id = parentDeveloper.id
				name = parentDeveloper.name
				email = parentDeveloper.email
				organization = parentDeveloper.organization
			}
		}
	}
}
