package org.eclipse.xtext.xtext.ui.wizard.project;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.util.IProjectFactoryContributor;
import org.eclipse.xtext.xtext.ui.wizard.project.DefaultProjectFactoryContributor;
import org.eclipse.xtext.xtext.ui.wizard.project.XtextProjectInfo;

/**
 * Contributes Web parts to an *.web project<br>
 * <b>WIP:</b> Most of the content will be generated with the web generator fragment.
 * 
 * @author Dennis Huebner - Initial contribution and API
 * @since 2.9
 */
@SuppressWarnings("all")
public class WebProjectContributor extends DefaultProjectFactoryContributor {
  private XtextProjectInfo projectInfo;
  
  public WebProjectContributor(final XtextProjectInfo projectInfo) {
    this.projectInfo = projectInfo;
  }
  
  @Override
  public void contributeFiles(final IProject project, final IProjectFactoryContributor.IFileCreator fc) {
    this.contributeGradleFiles(fc);
    this.contributeXtendCode(fc);
    this.contributeWebFiles(fc);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("To build this project you need to install Gradle.");
    _builder.newLine();
    _builder.append("https://gradle.org/docs/current/userguide/installation.html");
    _builder.newLine();
    _builder.newLine();
    _builder.append("The following tasks are available:");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("eclipse - generates Eclipse metadata like .project and .classpath");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("jettyRun - starts a server with an example editor");
    _builder.newLine();
    _builder.newLine();
    _builder.append("While the server is running, point your web browser to http://localhost:8080");
    _builder.newLine();
    _builder.append("to test the editor for your language. The server can also be started from");
    _builder.newLine();
    _builder.append("Eclipse with the ServerLauncher class (right-click > Run As > Java Application).");
    _builder.newLine();
    this.writeToFile(_builder, fc, "readme.txt");
  }
  
  public IFile contributeWebFiles(final IProjectFactoryContributor.IFileCreator fc) {
    IFile _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Strict//EN\" \"http://www.w3.org/TR/html4/strict.dtd\">");
      _builder.newLine();
      _builder.append("<html>");
      _builder.newLine();
      _builder.append("<head>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<meta http-equiv=\"Content-Language\" content=\"en-us\">");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<title>Example Web Editor</title>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"xtext/");
      String _xtextVersion = this.projectInfo.getXtextVersion();
      _builder.append(_xtextVersion, "\t");
      _builder.append("/xtext.css\"/>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"style.css\" />");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<script src=\"webjars/requirejs/2.1.17/require.min.js\"></script>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<script type=\"text/javascript\">");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("require.config({");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("paths: {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\"text\": \"webjars/requirejs-text/2.0.10-3/text\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\"jquery\": \"webjars/jquery/2.1.4/jquery.min\",");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("\"xtext/xtext\": \"xtext/");
      String _xtextVersion_1 = this.projectInfo.getXtextVersion();
      _builder.append(_xtextVersion_1, "\t\t\t\t");
      _builder.append("/xtext\"");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("});");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("require([\"xtext/xtext\"], function(xtext) {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("xtext.createEditor();");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("});");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("</script>");
      _builder.newLine();
      _builder.append("</head>");
      _builder.newLine();
      _builder.append("<body>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<div class=\"container\">");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<div class=\"header\">");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("<h1>Example ");
      String _languageNameAbbreviation = this.projectInfo.getLanguageNameAbbreviation();
      _builder.append(_languageNameAbbreviation, "\t\t");
      _builder.append(" Web Editor</h1>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("<div class=\"content\">");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("<div class=\"xtext-editor\" data-editor-lang=\"");
      String _fileExtension = this.projectInfo.getFileExtension();
      _builder.append(_fileExtension, "\t\t");
      _builder.append("\"></div>");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("</body>");
      _builder.newLine();
      _builder.append("</html>");
      _builder.newLine();
      this.writeToFile(_builder, fc, "src/main/webapp/index.html");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("body {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("width: 100%;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("height: 100%;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("overflow: hidden;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("font: 16px Helvetica,sans-serif;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("a {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("color: #22a;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("text-decoration: none;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("a:hover {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("text-decoration: underline;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append(".container {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("display: block;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("position: absolute;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("top: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("bottom: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("left: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("right: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("margin: 20px;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append(".header {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("display: block;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("position: absolute;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("background-color: #e8e8e8;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("top: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("left: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("right: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("height: 60px;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("padding: 10px;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append(".content {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("display: block;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("position: absolute;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("top: 90px;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("bottom: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("left: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("width: 640px;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append(".xtext-editor {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("display: block;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("position: absolute;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("top: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("bottom: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("left: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("right: 0;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("padding: 4px;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("border: 1px solid #aaa;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append(".contentassist .proposal-default {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("color: #888;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append(".contentassist .proposal-name {");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("color: #000;");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("padding-right: 12px;");
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      _xblockexpression = this.writeToFile(_builder_1, fc, "src/main/webapp/style.css");
    }
    return _xblockexpression;
  }
  
  public IFile contributeGradleFiles(final IProjectFactoryContributor.IFileCreator fc) {
    IFile _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("plugins {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id \'org.xtend.xtend\' version \'0.4.7\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id \'eclipse\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("id \'war\'");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("sourceSets.main.xtendOutputDir = \'src/main/xtend-gen\'");
      _builder.newLine();
      _builder.newLine();
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("compile group: \'org.eclipse.xtend\', name: \'org.eclipse.xtend.lib\', version: \'");
      String _xtextVersion = this.projectInfo.getXtextVersion();
      _builder.append(_xtextVersion, "\t");
      _builder.append("\'");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("compile group: \'org.eclipse.xtext\', name: \'org.eclipse.xtext.web.servlet\', version: \'");
      String _xtextVersion_1 = this.projectInfo.getXtextVersion();
      _builder.append(_xtextVersion_1, "\t");
      _builder.append("\'");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("compile project(\':");
      String _projectName = this.projectInfo.getProjectName();
      _builder.append(_projectName, "\t");
      _builder.append("\')");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("compile project(\':");
      String _ideProjectName = this.projectInfo.getIdeProjectName();
      _builder.append(_ideProjectName, "\t");
      _builder.append("\')");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("compile group: \'org.webjars\', name: \'requirejs\', version: \'2.1.17\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("compile group: \'org.webjars\', name: \'requirejs-text\', version: \'2.0.10-3\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("compile group: \'org.webjars\', name: \'jquery\', version: \'2.1.4\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("providedCompile group: \'org.eclipse.jetty\', name: \'jetty-annotations\', version: \'9.2.+\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("providedCompile group: \'org.slf4j\', name: \'slf4j-log4j12\', version: \'1.7.+\'");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("task jettyRun(type:JavaExec) {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("dependsOn(sourceSets.main.runtimeClasspath)");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("classpath = sourceSets.main.runtimeClasspath.filter{it.exists()}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("main = \"");
      String _basePackage = this.projectInfo.getBasePackage();
      _builder.append(_basePackage, "\t");
      _builder.append(".");
      _builder.append(XtextProjectInfo.WEB, "\t");
      _builder.append(".ServerLauncher\"");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("standardInput = System.in");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("allprojects {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("repositories {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("jcenter()");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("subprojects {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("apply plugin: \'java\'");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("sourceSets.main.java.srcDirs = [\'src\', \'src-gen\', \'xtend-gen\']");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("sourceSets.main.resources.srcDirs = [\'src\', \'src-gen\']");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("configure(project(\':");
      String _projectName_1 = this.projectInfo.getProjectName();
      _builder.append(_projectName_1, "");
      _builder.append("\')) {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("dependencies {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("compile group: \'org.eclipse.xtext\', name: \'org.eclipse.xtext.common.types\', version: \'");
      String _xtextVersion_2 = this.projectInfo.getXtextVersion();
      _builder.append(_xtextVersion_2, "\t\t");
      _builder.append("\'");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _builder.newLine();
      _builder.append("configure(project(\':");
      String _ideProjectName_1 = this.projectInfo.getIdeProjectName();
      _builder.append(_ideProjectName_1, "");
      _builder.append("\')) {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("dependencies { ");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("compile project(\':");
      String _projectName_2 = this.projectInfo.getProjectName();
      _builder.append(_projectName_2, "\t\t");
      _builder.append("\')");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("compile group: \'org.eclipse.xtext\', name: \'org.eclipse.xtext.ide\', version: \'");
      String _xtextVersion_3 = this.projectInfo.getXtextVersion();
      _builder.append(_xtextVersion_3, "\t\t");
      _builder.append("\' ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      this.writeToFile(_builder, fc, "build.gradle");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("includeFlat \'");
      String _projectName_3 = this.projectInfo.getProjectName();
      _builder_1.append(_projectName_3, "");
      _builder_1.append("\'");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("includeFlat \'");
      String _ideProjectName_2 = this.projectInfo.getIdeProjectName();
      _builder_1.append(_ideProjectName_2, "");
      _builder_1.append("\'");
      _builder_1.newLineIfNotEmpty();
      _xblockexpression = this.writeToFile(_builder_1, fc, "settings.gradle");
    }
    return _xblockexpression;
  }
  
  public IFile contributeXtendCode(final IProjectFactoryContributor.IFileCreator fc) {
    IFile _xblockexpression = null;
    {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("package ");
      String _basePackage = this.projectInfo.getBasePackage();
      _builder.append(_basePackage, "");
      _builder.append(".");
      _builder.append(XtextProjectInfo.WEB, "");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("import java.net.InetSocketAddress");
      _builder.newLine();
      _builder.append("import org.eclipse.jetty.annotations.AnnotationConfiguration");
      _builder.newLine();
      _builder.append("import org.eclipse.jetty.server.Server");
      _builder.newLine();
      _builder.append("import org.eclipse.jetty.util.log.Slf4jLog");
      _builder.newLine();
      _builder.append("import org.eclipse.jetty.webapp.MetaInfConfiguration");
      _builder.newLine();
      _builder.append("import org.eclipse.jetty.webapp.WebAppContext");
      _builder.newLine();
      _builder.append("import org.eclipse.jetty.webapp.WebInfConfiguration");
      _builder.newLine();
      _builder.append("import org.eclipse.jetty.webapp.WebXmlConfiguration");
      _builder.newLine();
      _builder.newLine();
      _builder.append("class ServerLauncher {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("def static void main(String[] args) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("val server = new Server(new InetSocketAddress(\'localhost\', 8080))");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("server.handler = new WebAppContext => [");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("resourceBase = \'src/main/webapp\'");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("welcomeFiles = #[\"index.html\"]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("contextPath = \"/\"");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("configurations = #[");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("new AnnotationConfiguration,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("new WebXmlConfiguration,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("new WebInfConfiguration,");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("new MetaInfConfiguration");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("setAttribute(WebInfConfiguration.CONTAINER_JAR_PATTERN, \".*org\\\\.eclipse\\\\.xtext\\\\.web.*|.*");
      String _webProjectName = this.projectInfo.getWebProjectName();
      String _replaceAll = _webProjectName.replaceAll("\\.", "\\\\\\\\.");
      _builder.append(_replaceAll, "\t\t\t");
      _builder.append(".*|.*requirejs.*|.*jquery.*\")");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("]");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("val log = new Slf4jLog");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("server.start");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("log.info(\'Press enter to stop the server...\')");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("new Thread[");
      _builder.newLine();
      _builder.append("\t    \t");
      _builder.append("val key = System.in.read");
      _builder.newLine();
      _builder.append("\t    \t");
      _builder.append("server.stop");
      _builder.newLine();
      _builder.append("\t    \t");
      _builder.append("if (key == -1)");
      _builder.newLine();
      _builder.append("\t    \t\t");
      _builder.append("log.warn(\'The standard input stream is empty. If you are using Gradle, set the property \\\'standardInput = System.in\\\' in the JavaExec task.\')");
      _builder.newLine();
      _builder.append("\t    ");
      _builder.append("].start");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("server.join");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      String _baseWebPackagePath = this.baseWebPackagePath();
      String _plus = (_baseWebPackagePath + "/ServerLauncher.xtend");
      this.writeToFile(_builder, fc, _plus);
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("package ");
      String _basePackage_1 = this.projectInfo.getBasePackage();
      _builder_1.append(_basePackage_1, "");
      _builder_1.append(".");
      _builder_1.append(XtextProjectInfo.WEB, "");
      _builder_1.newLineIfNotEmpty();
      _builder_1.newLine();
      _builder_1.append("import com.google.inject.Guice");
      _builder_1.newLine();
      _builder_1.append("import java.util.concurrent.ExecutorService");
      _builder_1.newLine();
      _builder_1.append("import java.util.concurrent.Executors");
      _builder_1.newLine();
      _builder_1.append("import javax.servlet.annotation.WebServlet");
      _builder_1.newLine();
      _builder_1.append("import ");
      String _basePackage_2 = this.projectInfo.getBasePackage();
      _builder_1.append(_basePackage_2, "");
      _builder_1.append(".");
      String _languageNameAbbreviation = this.projectInfo.getLanguageNameAbbreviation();
      _builder_1.append(_languageNameAbbreviation, "");
      _builder_1.append("RuntimeModule");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("import ");
      String _basePackage_3 = this.projectInfo.getBasePackage();
      _builder_1.append(_basePackage_3, "");
      _builder_1.append(".");
      String _languageNameAbbreviation_1 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_1.append(_languageNameAbbreviation_1, "");
      _builder_1.append("StandaloneSetup");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("import org.eclipse.xtext.web.servlet.XtextServlet");
      _builder_1.newLine();
      _builder_1.append("import com.google.inject.Module");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("@WebServlet(name = \"Xtext Services\", urlPatterns = \"/xtext-service/*\")");
      _builder_1.newLine();
      _builder_1.append("class ");
      String _languageNameAbbreviation_2 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_1.append(_languageNameAbbreviation_2, "");
      _builder_1.append("XtextServlet extends XtextServlet {");
      _builder_1.newLineIfNotEmpty();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("ExecutorService executorService");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("override init() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("super.init()");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("executorService = Executors.newCachedThreadPool");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("new ");
      String _languageNameAbbreviation_3 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_1.append(_languageNameAbbreviation_3, "\t\t");
      _builder_1.append("StandaloneSetup {");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t\t\t");
      _builder_1.append("override createInjector() {");
      _builder_1.newLine();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("val runtimeModule = new ");
      String _languageNameAbbreviation_4 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_1.append(_languageNameAbbreviation_4, "\t\t\t\t");
      _builder_1.append("RuntimeModule as Module");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("val webModule = new ");
      String _languageNameAbbreviation_5 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_1.append(_languageNameAbbreviation_5, "\t\t\t\t");
      _builder_1.append("WebModule(executorService)");
      _builder_1.newLineIfNotEmpty();
      _builder_1.append("\t\t\t\t");
      _builder_1.append("return Guice.createInjector(runtimeModule, webModule)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("}.createInjectorAndDoEMFRegistration");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("override destroy() {");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("if (executorService !== null)");
      _builder_1.newLine();
      _builder_1.append("\t\t\t");
      _builder_1.append("executorService.shutdown()");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("executorService = null");
      _builder_1.newLine();
      _builder_1.append("\t\t");
      _builder_1.append("super.destroy()");
      _builder_1.newLine();
      _builder_1.append("\t");
      _builder_1.append("}");
      _builder_1.newLine();
      _builder_1.newLine();
      _builder_1.append("}");
      _builder_1.newLine();
      StringConcatenation _builder_2 = new StringConcatenation();
      String _baseWebPackagePath_1 = this.baseWebPackagePath();
      _builder_2.append(_baseWebPackagePath_1, "");
      _builder_2.append("/");
      String _languageNameAbbreviation_6 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_2.append(_languageNameAbbreviation_6, "");
      _builder_2.append("XtextServlet.xtend");
      this.writeToFile(_builder_1, fc, _builder_2.toString());
      StringConcatenation _builder_3 = new StringConcatenation();
      _builder_3.append("package ");
      String _basePackage_4 = this.projectInfo.getBasePackage();
      _builder_3.append(_basePackage_4, "");
      _builder_3.append(".");
      _builder_3.append(XtextProjectInfo.WEB, "");
      _builder_3.newLineIfNotEmpty();
      _builder_3.newLine();
      _builder_3.append("import com.google.inject.Binder");
      _builder_3.newLine();
      _builder_3.append("import com.google.inject.name.Names");
      _builder_3.newLine();
      _builder_3.append("import java.util.concurrent.ExecutorService");
      _builder_3.newLine();
      _builder_3.append("import org.eclipse.xtend.lib.annotations.Accessors");
      _builder_3.newLine();
      _builder_3.append("import org.eclipse.xtend.lib.annotations.FinalFieldsConstructor");
      _builder_3.newLine();
      _builder_3.append("import org.eclipse.xtext.ide.LexerIdeBindings");
      _builder_3.newLine();
      _builder_3.append("import org.eclipse.xtext.ide.editor.contentassist.antlr.IContentAssistParser");
      _builder_3.newLine();
      _builder_3.append("import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer");
      _builder_3.newLine();
      _builder_3.append("import org.eclipse.xtext.service.AbstractGenericModule");
      _builder_3.newLine();
      _builder_3.append("import ");
      String _basePackage_5 = this.projectInfo.getBasePackage();
      _builder_3.append(_basePackage_5, "");
      _builder_3.append(".ide.contentassist.antlr.");
      String _languageNameAbbreviation_7 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_3.append(_languageNameAbbreviation_7, "");
      _builder_3.append("Parser");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("import ");
      String _basePackage_6 = this.projectInfo.getBasePackage();
      _builder_3.append(_basePackage_6, "");
      _builder_3.append(".ide.contentassist.antlr.internal.Internal");
      String _languageNameAbbreviation_8 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_3.append(_languageNameAbbreviation_8, "");
      _builder_3.append("Lexer");
      _builder_3.newLineIfNotEmpty();
      _builder_3.newLine();
      _builder_3.append("@Accessors");
      _builder_3.newLine();
      _builder_3.append("@FinalFieldsConstructor");
      _builder_3.newLine();
      _builder_3.append("class ");
      String _languageNameAbbreviation_9 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_3.append(_languageNameAbbreviation_9, "");
      _builder_3.append("WebModule extends AbstractGenericModule {");
      _builder_3.newLineIfNotEmpty();
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("val ExecutorService executorService");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def configureExecutorService(Binder binder) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("binder.bind(ExecutorService).toInstance(executorService)");
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def configureContentAssistLexer(Binder binder) {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      _builder_3.append("binder.bind(Lexer).annotatedWith(Names.named(LexerIdeBindings.CONTENT_ASSIST)).to(Internal");
      String _languageNameAbbreviation_10 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_3.append(_languageNameAbbreviation_10, "\t\t");
      _builder_3.append("Lexer)");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("\t");
      _builder_3.append("def Class<? extends IContentAssistParser> bindIContentAssistParser() {");
      _builder_3.newLine();
      _builder_3.append("\t\t");
      String _languageNameAbbreviation_11 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_3.append(_languageNameAbbreviation_11, "\t\t");
      _builder_3.append("Parser");
      _builder_3.newLineIfNotEmpty();
      _builder_3.append("\t");
      _builder_3.append("}");
      _builder_3.newLine();
      _builder_3.newLine();
      _builder_3.append("}");
      _builder_3.newLine();
      StringConcatenation _builder_4 = new StringConcatenation();
      String _baseWebPackagePath_2 = this.baseWebPackagePath();
      _builder_4.append(_baseWebPackagePath_2, "");
      _builder_4.append("/");
      String _languageNameAbbreviation_12 = this.projectInfo.getLanguageNameAbbreviation();
      _builder_4.append(_languageNameAbbreviation_12, "");
      _builder_4.append("WebModule.xtend");
      _xblockexpression = this.writeToFile(_builder_3, fc, _builder_4.toString());
    }
    return _xblockexpression;
  }
  
  public String baseWebPackagePath() {
    String _basePackagePath = this.projectInfo.getBasePackagePath();
    String _plus = ("src/main/java/" + _basePackagePath);
    String _plus_1 = (_plus + "/");
    return (_plus_1 + XtextProjectInfo.WEB);
  }
}
