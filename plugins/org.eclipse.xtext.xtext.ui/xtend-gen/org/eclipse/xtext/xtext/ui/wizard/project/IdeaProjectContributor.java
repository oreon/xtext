package org.eclipse.xtext.xtext.ui.wizard.project;

import org.eclipse.core.resources.IProject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.ui.util.IProjectFactoryContributor;
import org.eclipse.xtext.xtext.ui.wizard.project.DefaultProjectFactoryContributor;
import org.eclipse.xtext.xtext.ui.wizard.project.XtextProjectInfo;

/**
 * Contributes Idea parts to an *.idea project
 * @author Dennis Huebner - Initial contribution and API
 * @since 2.9
 */
@SuppressWarnings("all")
public class IdeaProjectContributor extends DefaultProjectFactoryContributor {
  private XtextProjectInfo projectInfo;
  
  public IdeaProjectContributor(final XtextProjectInfo projectInfo) {
    this.projectInfo = projectInfo;
  }
  
  @Override
  public void contributeFiles(final IProject project, final IProjectFactoryContributor.IFileCreator fc) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("plugins {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("id \'org.xtend.xtend\' version \'0.4.7\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("id \'org.xtext.idea-plugin\' version \'0.3.17\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("id \'eclipse\'");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("compile project(\':");
    String _projectName = this.projectInfo.getProjectName();
    _builder.append(_projectName, "\t");
    _builder.append("\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("compile project(\':");
    String _ideProjectName = this.projectInfo.getIdeProjectName();
    _builder.append(_ideProjectName, "\t");
    _builder.append("\')");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("ideaDevelopment {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("ideaVersion = \'141.814.3\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("pluginRepositories {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("url \'http://download.eclipse.org/modeling/tmf/xtext/idea/");
    String _xtextVersion = this.projectInfo.getXtextVersion();
    _builder.append(_xtextVersion, "\t\t");
    _builder.append("/updatePlugins.xml\'");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("pluginDependencies {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("id \'org.eclipse.xtext.idea\' version \'");
    String _xtextVersion_1 = this.projectInfo.getXtextVersion();
    _builder.append(_xtextVersion_1, "\t\t");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("sourceSets.main.xtendOutputDir = \'xtend-gen\'");
    _builder.newLine();
    _builder.newLine();
    _builder.append("allprojects {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("repositories { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("jcenter()");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("apply plugin: \'java\'");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sourceSets.main.java.srcDirs = [\'src\', \'src-gen\', \'xtend-gen\']");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("sourceSets.main.resources.srcDirs = [\'src\', \'src-gen\']");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("configure(project(\':");
    String _projectName_1 = this.projectInfo.getProjectName();
    _builder.append(_projectName_1, "");
    _builder.append("\')) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("dependencies {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("compile \'org.eclipse.xtext:org.eclipse.xtext.common.types:");
    String _xtextVersion_2 = this.projectInfo.getXtextVersion();
    _builder.append(_xtextVersion_2, "\t\t");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("configure(project(\'");
    String _ideProjectName_1 = this.projectInfo.getIdeProjectName();
    _builder.append(_ideProjectName_1, "");
    _builder.append("\')) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("dependencies { ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("compile project(\':");
    String _projectName_2 = this.projectInfo.getProjectName();
    _builder.append(_projectName_2, "\t\t");
    _builder.append("\')");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("compile \'org.eclipse.xtext:org.eclipse.xtext.ide:");
    String _xtextVersion_3 = this.projectInfo.getXtextVersion();
    _builder.append(_xtextVersion_3, "\t\t");
    _builder.append("\' ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    this.writeToFile(_builder, fc, "build.gradle");
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("includeFlat \'");
    String _projectName_3 = this.projectInfo.getProjectName();
    _builder_1.append(_projectName_3, "");
    _builder_1.append("\'");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("includeFlat \'");
    String _ideProjectName_2 = this.projectInfo.getIdeProjectName();
    _builder_1.append(_ideProjectName_2, "");
    _builder_1.append("\'");
    _builder_1.newLineIfNotEmpty();
    this.writeToFile(_builder_1, fc, "settings.gradle");
    StringConcatenation _builder_2 = new StringConcatenation();
    _builder_2.append("To build this project you need to install Gradle.");
    _builder_2.newLine();
    _builder_2.append("https://gradle.org/docs/current/userguide/installation.html");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append("The following tasks are available:");
    _builder_2.newLine();
    _builder_2.append(" ");
    _builder_2.append("eclipse - generates Eclipse metadata like .project and .classpath, including the IntelliJ libraries");
    _builder_2.newLine();
    _builder_2.append(" ");
    _builder_2.append("test - runs all your unit tests");
    _builder_2.newLine();
    _builder_2.append(" ");
    _builder_2.append("assemble - creates the shippable build outputs. This includes an ideaZip, which packages your plugin in the format that the IDEA plugin manager understands");
    _builder_2.newLine();
    _builder_2.append(" ");
    _builder_2.append("runIdea - starts IntelliJ IDEA with your plugin installed");
    _builder_2.newLine();
    _builder_2.newLine();
    _builder_2.append(" ");
    _builder_2.append("For more information please read: https://github.com/xtext/xtext-gradle-plugin/tree/master/xtext-idea-gradle-plugin");
    _builder_2.newLine();
    this.writeToFile(_builder_2, fc, "readme.txt");
  }
}
